{
    "Layered Architecture": {
      "description": "Layered Architecture organizes the application into horizontal layers, where each layer performs a specific role (e.g., presentation, business logic, data access). This pattern promotes separation of concerns and maintainability but can lead to tight coupling if not implemented carefully."
    },
    "Event-Driven Architecture (Pub-Sub Architecture)": {
      "description": "Event-Driven Architecture centers around the production, detection, consumption of, and reaction to events. Components communicate by publishing events to an event bus, and other components can subscribe to these events. It enables loose coupling, scalability, and responsiveness."
    },
    "Microkernel Architecture": {
      "description": "Microkernel Architecture consists of a core system (kernel) that provides minimal functionalities and plugin modules that extend the core's capabilities. This pattern is suitable for applications with a clear set of core responsibilities and a need for dynamic extensibility."
    },
    "Microservices Architecture": {
      "description": "Microservices Architecture structures an application as a collection of small, independent services that communicate over a network. Each service focuses on a specific business capability and can be developed, deployed, and scaled independently, offering flexibility and resilience."
    },
    "Space-Based Architecture": {
      "description": "Space-Based Architecture (also known as Tuple Space Architecture) uses shared memory spaces to enable communication and coordination between distributed processes. It is well-suited for applications with high scalability and fault tolerance requirements."
    },
    "Pipeline Architecture (Pipe-Filter Architecture)": {
      "description": "Pipeline Architecture organizes the system into a series of processing stages (filters) connected by channels (pipes). Data flows through the pipeline, being transformed at each stage. It simplifies complex processing tasks by breaking them into smaller, independent steps."
    },
    "Service-Based Architecture": {
      "description": "Service-Based Architecture structures the application into a set of services, similar to microservices but typically with larger-grained services that encapsulate more business logic. Services communicate with each other over a network and are often designed for reusability."
    },
    "Client-Server Architecture": {
      "description": "Client-Server Architecture separates the application into client components that request services and server components that provide services. This pattern is common in web applications, where the browser acts as the client and a web server acts as the server."
    }
  }